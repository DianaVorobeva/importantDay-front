{"version":3,"file":"index.js","sources":["../src/utils/flow.ts","../src/utils/isServer.ts","../src/utils/getMaskOptions.ts","../src/useMaskInput.ts","../src/withHookFormMask.ts","../src/withMask.ts","../src/useHookFormMask.ts"],"sourcesContent":["export function flow(...funcs: Array<Function>) : Function {\n  const { length } = funcs;\n  let index = length;\n  while (index--) {\n    if (typeof funcs[index] !== 'function') {\n      throw new TypeError('Expected a function');\n    }\n  }\n  return (...args: Array<Function>) => {\n    let i = 0;\n    let result = length ? funcs[i].apply(this, args) : args[0];\n    while (++i < length) {\n      result = funcs[i].call(this, result);\n    }\n    return result;\n  };\n}\n","export const isServer = !(\n  typeof window !== 'undefined'\n  && window.document\n  && window.document.createElement\n);\n","import { Mask, Options } from '../types';\n\nexport const getMaskOptions = (mask?: Mask, _options?: Options): Options => {\n  const options: Options = {\n    ..._options,\n    jitMasking: false,\n  };\n  if (!mask) return options;\n\n  const masks: Record<string, Inputmask.Options> = {\n    datetime: {\n      alias: 'datetime',\n      inputFormat: 'dd/mm/yyyy',\n      placeholder: 'dd/mm/yyyy',\n      ...options,\n    },\n    cpf: {\n      mask: '999.999.999-99',\n      placeholder: '___.___.___-__',\n      ...options,\n    },\n    cnpj: {\n      mask: '99.999.999/9999-99',\n      placeholder: '__.___.___/____-__',\n      ...options,\n    },\n    email: {\n      alias: 'email',\n      placeholder: '',\n      ...options,\n    },\n    numeric: {\n      alias: 'numeric',\n      placeholder: '',\n      ...options,\n    },\n    currency: {\n      alias: 'currency',\n      prefix: '$ ',\n      placeholder: '',\n      ...options,\n    },\n    decimal: {\n      alias: 'decimal',\n      placeholder: '',\n      ...options,\n    },\n    integer: {\n      alias: 'integer',\n      placeholder: '',\n      ...options,\n    },\n    percentage: {\n      alias: 'percentage',\n      placeholder: ' %',\n      suffix: ' %',\n      ...options,\n    },\n    url: {\n      alias: 'url',\n      placeholder: 'https://',\n      ...options,\n    },\n    ip: {\n      alias: 'ip',\n      ...options,\n    },\n    mac: {\n      alias: 'mac',\n      ...options,\n    },\n    ssn: {\n      alias: 'ssn',\n      ...options,\n    },\n\n  };\n\n  if (typeof mask === 'string') {\n    if (masks[mask]) return masks[mask];\n  } else if (typeof mask === 'object') {\n    return {\n      ...mask,\n      ...options,\n    };\n  }\n\n  return {\n    mask,\n    ...options,\n  };\n};\n","import { useEffect, useRef } from 'react';\nimport Inputmask from 'inputmask';\nimport { getMaskOptions, isServer } from './utils';\nimport { Mask, Options } from './types';\n\ninterface UseInputMaskOptions {\n  mask: Mask,\n  register?(element: HTMLElement): void\n  options?: Options\n}\n\nconst useInputMask = (props: UseInputMaskOptions) => {\n  const { mask, register, options } = props;\n  const ref = useRef<HTMLInputElement>(null);\n  if (isServer) return ref;\n\n  useEffect(() => {\n    if (!isServer) {\n      if (!ref.current) return;\n\n      const maskInput = Inputmask(getMaskOptions(mask, options));\n\n      maskInput.mask(ref.current);\n\n      if (register && ref.current) {\n        register(ref.current);\n      }\n    }\n  }, [mask, register, options]);\n\n  return ref;\n};\n\nexport default useInputMask;\n","import Inputmask from 'inputmask';\nimport { RefCallback } from 'react';\nimport { flow, getMaskOptions } from './utils';\nimport { Mask, Options, UseFormRegisterReturn } from './types';\n\nexport const withHookFormMask = (\n  register: UseFormRegisterReturn,\n  mask: Mask,\n  options?: Options,\n): UseFormRegisterReturn => {\n  //\n  let newRef;\n\n  if (register) {\n    const { ref } = register;\n\n    const maskInput = Inputmask(getMaskOptions(mask, options));\n\n    newRef = flow((_ref: HTMLElement) => {\n      if (_ref) maskInput.mask(_ref);\n      return _ref;\n    }, ref) as RefCallback<HTMLElement>;\n  }\n\n  return {\n    ...register,\n    ref: newRef as RefCallback<HTMLElement>,\n  };\n};\n","import Inputmask from 'inputmask';\nimport { getMaskOptions, isServer } from './utils';\nimport { Input, Mask, Options } from './types';\n\nexport const withMask = (mask: Mask, options?: Options) => (input: Input) => {\n  //\n  if (isServer) return input;\n  if (mask === null) return input;\n\n  const maskInput = Inputmask(getMaskOptions(mask, options));\n\n  if (input) {\n    maskInput.mask(input);\n  }\n\n  return input;\n};\n","import Inputmask from 'inputmask';\nimport { RefCallback } from 'react';\nimport {\n  FieldValues, Path, UseFormRegister, RegisterOptions,\n} from 'react-hook-form';\nimport { flow, getMaskOptions } from './utils';\nimport { Mask, Options } from './types';\n\nexport function useHookFormMask<\n  T extends FieldValues, D extends RegisterOptions,\n>(registerFn: UseFormRegister<T>) {\n  return (fieldName: Path<T>, mask: Mask, options?: Options & D) => {\n    if (!registerFn) throw new Error('registerFn is required');\n\n    const { ref, ...restRegister } = registerFn(fieldName);\n\n    const maskInput = Inputmask(getMaskOptions(mask, options));\n\n    const newRef = flow((_ref: HTMLElement) => {\n      if (_ref) maskInput.mask(_ref);\n      return _ref;\n    }, ref) as RefCallback<HTMLElement>;\n\n    return {\n      ...restRegister,\n      ref: newRef as RefCallback<HTMLElement>,\n    };\n  };\n}\n"],"names":["flow","funcs","length","index","TypeError","args","i","result","apply","call","isServer","window","document","createElement","getMaskOptions","mask","_options","options","_object_spread_props","jitMasking","masks","datetime","_object_spread","alias","inputFormat","placeholder","cpf","cnpj","email","numeric","currency","prefix","decimal","integer","percentage","suffix","url","ip","mac","ssn","useInputMask","props","register","ref","useRef","useEffect","current","maskInput","Inputmask","withHookFormMask","newRef","_ref","withMask","input","useHookFormMask","registerFn","fieldName","Error","restRegister"],"mappings":"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"}