import * as react from 'react';
import * as react_hook_form from 'react-hook-form';
import { UseFormRegisterReturn, FieldValues, RegisterOptions, UseFormRegister, Path } from 'react-hook-form';

type Mask = 'email' | 'cpf' | 'datetime' | 'numeric' | 'currency' | 'decimal' | 'integer' | (string & {}) | (string[] & {}) | null;
type Options = Inputmask.Options;
type Input = HTMLInputElement | HTMLTextAreaElement | HTMLElement | HTMLInputElement | null;

interface UseInputMaskOptions {
    mask: Mask;
    register?(element: HTMLElement): void;
    options?: Options;
}
declare const useInputMask: (props: UseInputMaskOptions) => react.RefObject<HTMLInputElement>;

declare const withHookFormMask: (register: UseFormRegisterReturn, mask: Mask, options?: Options) => UseFormRegisterReturn;

declare const withMask: (mask: Mask, options?: Options) => (input: Input) => Input;

declare function useHookFormMask<T extends FieldValues, D extends RegisterOptions>(registerFn: UseFormRegister<T>): (fieldName: Path<T>, mask: Mask, options?: Options & D) => {
    ref: (instance: HTMLElement | null) => void;
    onChange: react_hook_form.ChangeHandler;
    onBlur: react_hook_form.ChangeHandler;
    name: Path<T>;
    min?: string | number | undefined;
    max?: string | number | undefined;
    maxLength?: number | undefined;
    minLength?: number | undefined;
    pattern?: string | undefined;
    required?: boolean | undefined;
    disabled?: boolean | undefined;
};

export { useInputMask as default, useHookFormMask, withHookFormMask, withMask };
